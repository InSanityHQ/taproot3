<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2021-09-24 Fri 14:10 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Categories, Logic and Language</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Taproot" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel="stylesheet" href="https://taproot3.sanity.gq/global.css" type="text/css"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/prism.min.js" integrity="sha512-hpZ5pDCF2bRCweL5WoA0/N1elet1KYL5mx3LP555Eg/0ZguaHawxNvEjF6O3rufAChs16HVNhEc6blF/rZoowQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/autoloader/prism-autoloader.min.js" integrity="sha512-sv0slik/5O0JIPdLBCR2A3XDg/1U3WuDEheZfI/DI5n8Yqc3h5kjrnr46FGBNiUAJF7rE4LHKwQ/SoSLRKAxEA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/autolinker/prism-autolinker.min.js" integrity="sha512-PaneznVpkV74O5FWaHuGG2Pa9aVgbrnDwLFbcebZikYcFVPUYimvlZUAX6AElPKDJsSDTBl7aN6V1WxFDi24aw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://raw.githubusercontent.com/PrismJS/prism-themes/master/themes/prism-atom-dark.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script type="text/javascript">
// @license magnet:?xt=urn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&dn=public-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="preamble" class="status">
<div>Categories, Logic and Language  Taproot 2021-09-24 Fri 13:59</div>
</div>
<div id="content">
<h1 class="title">Categories, Logic and Language</h1>
<p>
:ROAM<sub>REFS</sub>: <a href="https://docs.google.com/presentation/d/1rpqDXysh8GJJodXCTbWCj4MmIx87mT_ksyMqHoq-hkk/edit">https://docs.google.com/presentation/d/1rpqDXysh8GJJodXCTbWCj4MmIx87mT_ksyMqHoq-hkk/edit</a>
</p>

<div id="outline-container-org1d4ed38" class="outline-2">
<h2 id="org1d4ed38"><span class="section-number-2">1</span> <a href="https://www.amazon.com/Logicomix-search-truth-Apostolos-Doxiadis/dp/1596914521">Logicomix</a></h2>
</div>
<div id="outline-container-orgf2f429b" class="outline-2">
<h2 id="orgf2f429b"><span class="section-number-2">2</span> Category Theory</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Very general formalism of <i>objects</i> and <i>morphisms</i> - things and ways to connect them.</li>
<li>Almost like a 'theory of everything' for math.</li>
</ul>
</div>
<div id="outline-container-org5503076" class="outline-3">
<h3 id="org5503076"><span class="section-number-3">2.1</span> Origins</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>At some point Feynman realized that it's useful to draw linear operators as <a href="20210922132026-feynman_diagrams.html">diagrams</a> in a systematic manner.</li>
<li>Later, Penrose realized that this can be applied more broadly. Representing linear operators in a topological/geometric manner became its own field.</li>
<li>Separately, logicians had started using categories where the objects were propositions and morphism were proofs.
<ul class="org-ul">
<li>Programmers started using them where objects are data types and morphism are programs.</li>
</ul></li>
<li>Category theory describes all these things in an abstract manner
<ul class="org-ul">
<li>Focus on approaching these relationships and how to compose them in a way abstracted away from objects</li>
</ul></li>
<li>Curry-Howard correspondence
<ul class="org-ul">
<li>Person that <a href="20210922132544-haskell.html">Haskell</a> is named after</li>
<li>Modeling programs as proofs</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org21c7d81" class="outline-3">
<h3 id="org21c7d81"><span class="section-number-3">2.2</span> Rosetta Stone</h3>
<div class="outline-text-3" id="text-2-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left"><b>Category Theory</b></td>
<td class="org-left">Physics</td>
<td class="org-left">Topology</td>
<td class="org-left">Logic</td>
<td class="org-left">Computation</td>
</tr>

<tr>
<td class="org-left">object</td>
<td class="org-left">system</td>
<td class="org-left">manifold</td>
<td class="org-left">proposition</td>
<td class="org-left">data type</td>
</tr>

<tr>
<td class="org-left">morphism</td>
<td class="org-left">process</td>
<td class="org-left">cobordism</td>
<td class="org-left">proof</td>
<td class="org-left">program</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org4cf46e2" class="outline-3">
<h3 id="org4cf46e2"><span class="section-number-3">2.3</span> Intro to Categories</h3>
<div class="outline-text-3" id="text-2-3">
<div class="defn" id="org578f6b5">
<p>
A <i>category</i> \(C\) consists of:
</p>
<ul class="org-ul">
<li>a collection of <i>objects</i>, where if \(X\) is an object \(X \in C\), and</li>
<li>for every pair of objects \((X,Y)\), there is a set \(\hom(X,Y)\) of morphisms from X to Y We call this set \(\hom(X,Y)\) a <b>homset</b>. If \(f \in  \hom(X,Y)\) then \(f\) maps \(X\) to \(Y\), or more formally, \(f: X \rightarrow Y\)</li>
</ul>
<p>
such that
</p>
<ul class="org-ul">
<li>for every object \(X\) there is an identity morphism that maps \(X\) to \(X\).</li>
<li>morphisms are composable: given \(f: X \to  Y\) and \(g: Y \to  Z\)  there is a morphism \(gf: X \to Z\)</li>
<li>an identity morphism is both a left and a right unit for composition (identities are commutative)</li>
<li>composition is associative</li>
</ul>

<p>
These objects and morphisms could be anything (see <a href="#org21c7d81">2.2</a>). Consider the symbols \(X\) and \(Y\) as sets capable of internal structure.
</p>

</div>

<p>
One example would be Haskell code. Take functions like <code>words</code> as morphisms and data types like strings as objects (objects can be different types!). Our output is another object.
</p>
<div class="org-src-container">
<pre class="src src-haskell">words "Hello World"
-- ["Hello", "World"]
</pre>
</div>
<div class="org-src-container">
<pre class="src src-haskell">length ["I", "like", "cats"]
-- 3
</pre>
</div>
<p>
Just like a normal morphism, we can <i>compose</i> functions in Haskell.
</p>
<div class="org-src-container">
<pre class="src src-haskell">let countwords = length . words
countwords "Yay for composition!"
-- 3
</pre>
</div>

<p>
A more casual definition of a category is a <i>network of composable relationships</i>&#x2026; of anything. The generality of category theory allows it to be useful to a wide variety of fields.
</p>
</div>
</div>
<div id="outline-container-orga508275" class="outline-3">
<h3 id="orga508275"><span class="section-number-3">2.4</span> Functors</h3>
<div class="outline-text-3" id="text-2-4">
<div class="defn" id="orgab036c5">
<p>
A <i>functor</i> \(F:C\to D\) from a category \(C\) to a category \(D\) is a map sending:
</p>
<ul class="org-ul">
<li>any object \(X \in C\) to an object \(F(X) \in D\),</li>
<li>any morphism \(f:X \to Y\) in \(C\) to a morphism \(F(f): F(X) \to F(Y)\) in \(D\)</li>
</ul>
<p>
in such a way that:
</p>
<ul class="org-ul">
<li>\(F\) preserves identities</li>
<li>\(F\) preserves composition</li>
</ul>

<p>
The primary difference here is how functors can act on both objects and morphisms.
</p>

</div>

<div class="note" id="org73bf555">
<p>
In logic, a category is a <i>theory</i> and the functor a <i>model</i> of a theory (allowing you to create a representation in another space).
</p>

</div>
</div>
</div>
<div id="outline-container-org51fe746" class="outline-3">
<h3 id="org51fe746"><span class="section-number-3">2.5</span> Natural Transformation</h3>
<div class="outline-text-3" id="text-2-5">
<p>
Gives us a way to turn functors into one another.
</p>

<div class="defn" id="org2b6304c">
<p>
Given two functors \(F,F' : C \to D\) a natural transformation \(\alpha : F \Rightarrow F'\) assigns to every object X in C a morphism \(\alpha_x : F(x) \to F'(X)\) such that for any morphism \(f: X \to Y\) in \(C\), the equation \(\alpha_y F(f) = F'(f)\alpha_x\) holds in \(D\).
</p>

</div>
</div>
</div>

<div id="outline-container-orgd24231d" class="outline-3">
<h3 id="orgd24231d"><span class="section-number-3">2.6</span> Types of Categories</h3>
<div class="outline-text-3" id="text-2-6">
</div>
<div id="outline-container-org4e71b5a" class="outline-4">
<h4 id="org4e71b5a"><span class="section-number-4">2.6.1</span> Monoidal Categories&#xa0;&#xa0;&#xa0;<span class="tag"><span class="review">review</span></span></h4>
<div class="outline-text-4" id="text-2-6-1">
<p>
A monoidal category has a function \(\otimes : C \times C \to C\) (a product of categories outputs pairs of morphisms and pairs of objects??) that takes two objects and puts them together to give a new object \(X\otimes Y\). This allows execution of morphisms in <i>parallel</i> or <i>series</i> by acting on pairs.
</p>
</div>
</div>
<div id="outline-container-org0a173ff" class="outline-4">
<h4 id="org0a173ff"><span class="section-number-4">2.6.2</span> Braided Monoidal Categories&#xa0;&#xa0;&#xa0;<span class="tag"><span class="unresearched">unresearched</span></span></h4>
</div>
<div id="outline-container-org0699b34" class="outline-4">
<h4 id="org0699b34"><span class="section-number-4">2.6.3</span> Closed Categories&#xa0;&#xa0;&#xa0;<span class="tag"><span class="unresearched">unresearched</span></span></h4>
<div class="outline-text-4" id="text-2-6-3">
<p>
hom(X &otimes; Y, Z) \approxeq hom(Y,X 
Idea of turning an operation into an object? Connection to <a href="20210922143034-currying.html">currying</a>.
</p>
</div>
</div>
</div>


<div id="outline-container-org431c49d" class="outline-3">
<h3 id="org431c49d"><span class="section-number-3">2.7</span> Lambda Calculus&#xa0;&#xa0;&#xa0;<span class="tag"><span class="unresearched">unresearched</span></span></h3>
<div class="outline-text-3" id="text-2-7">
</div>
</div>
</div>
</div>
</body>
</html>
