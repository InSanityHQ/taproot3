
#+TITLE: Functional Programming
* Day 1
#+PROPERTY: header-args :tangle test.sml

Functional programming comes from math!

#+begin_src  sml
  fn 0 => true | x => false
#+end_src

Here's a function for absolute value.
#+begin_src  sml
  fn x => if x >= 0 then x else 0 - x;
#+end_src
We can bind it to a name:
#+begin_src  sml
  val abs = fn x => if x >= 0 then x else 0 - x;
  abs ~4
#+end_src

#+RESULTS:
: val it = 4 : int

We can use tuples like =(1,2,3)=:
#+begin_src  sml
  val max = fn (x,y) => if x > y then x else y;
  max (1,2)
#+end_src

Functions are called like ~max (x,y)~.

#+RESULTS:
: val it = 2 : int

Every function has a single input type and single output type: to give multiple arguments you just pass a tuple.

This won't run.
#+begin_src  sml
  let
    val g = fn x = x + 3
  in
    if "hello" > g then 1 else false
  end
#+end_src
Why? First off, SML is /statically typed/ (unlike some other notable FP languages), and ="hello"= and =g= are not the same type.

What types does SML have?
- =int=
- =bool=
- =string=
- =a->b= (function)
- =a*b= (tuples)
- =type frac = int*int= (we can do type aliasing)

It also has =real=, but since floating points are... unique, they can't be compared nicely due to inaccuracies.

Let's try to make a function that checks if a tuple is =(0,0)=!
#+begin_src  sml
  val thing = fn (x,y) => if x=y andalso x=0 then true else false;
  thing (0,0)
#+end_src

#+RESULTS:
: val it = true : bool

... =andalso=? What? Apparently this is to get around the fact that =and= means something else.

We could also do it like:
#+begin_src  sml
  val thing = fn (0,0) => true | x => false;
  thing (0,0)
#+end_src

#+RESULTS:
: val it = true : bool
We can also do the Rust-style thing and have the second part be =_ => false= if we didn't care about naming the argument.
This whole =something => 2 | x => 3= thing is called a /pattern/: these clauses can be a constant, number, tuple, but not an expression.

Variables are immutable, but you can "shadow" variables like Rust:
#+begin_src  sml
  val abs = 2;
  val abs = 3;
  abs
#+end_src

Let's make a function to check if either part of a tuple is zero:
#+begin_src  sml
  val either_zero = fn (0, x) => true | (x, 0) => true | _ => false;
  either_zero (1,0)
#+end_src
#+RESULTS:
: val it = true : bool

Now, a factorial! We can allow a value to be recursive by using the =rec= keyword. Letting this not be default lets you shadow things.
#+begin_src  sml
  val rec fact = fn 1 => 1 | x => x * fact(x-1);
  fact 5
#+end_src

#+RESULTS:
: val it = 120 : int

Let's make a function that checks evenness (slowly...)!
#+begin_src  sml
val rec even = fn 0 => true | x => even(x-2) | 1 => false;
#+end_src
This won't work, because it evaluates these clauses in order.
#+begin_src  sml
  val rec even = fn 0 => true | 1 => false | x => even(x-2);
  even 5
#+end_src

#+RESULTS:
: val it = false : bool

Challenge problem: write a function that takes a nonnegative integer and returns whether or not it's a multiple of 3 (without modulo!)
#+begin_src  sml
  val mul3 = fn x => if (x div 3) * 3 = x then true else false;
  mul3 2
#+end_src
Now, without =div=.
#+begin_src  sml
  val rec f = fn x => if x - 3 = 0 then true else if x - 3 < 0 then false else f(x-3);
  f 20
#+end_src

#+RESULTS:
: val it = false : bool

Again.
#+begin_src  sml
  val rec f = fn 0 => true | 1 => true | 2 => false | x => f(x-3);
#+end_src

#+RESULTS:
: val f = fn : int -> bool
=if= is compiled away into pattern matches, and acts as a ternary of sorts.

Let's implement a basic math function:
#+begin_src  sml
  val rec mult = fn (0, _) => 0 | (_, 0) => 0 | (x, 1) => x | (x, y) => x+mult(x, y-1);
  mult (2,3)
#+end_src

#+RESULTS:
: val it = 6 : int

We can also define our own /type aliases/ (as we mentioned earlier) like so:
#+begin_src  sml
  type t = int*string
#+end_src
We can also define /datatypes/ (Rust enums!). Addition in this context means "this or that type":
#+begin_src  sml
  datatype intparse = Success of int | Failure of string;  
#+end_src
Let's try something simpler (=Option<int>= but in SML):
#+begin_src  sml
  datatype intoption = Some of int | None;
  val whee = Some 3
#+end_src

#+RESULTS:
: val whee = Some 3 : intoption

Sidenote: you can use a colon to do type annotations.
#+begin_src  sml
  val whee: int = 3
#+end_src

#+RESULTS:
: val whee = 3 : int

We can do operations on datatypes:
#+begin_src  sml
  datatype intoption = Some of int | None;
  val unwrap = fn Some x => x | None => 0
#+end_src

We can have /recursive datatypes/:
#+begin_src  sml
  datatype ilist = Empty | Front of (int*ilist);
  val rec length = fn Empty => 0 | Front (x, xs) => 1+length xs;
#+end_src
Let's make a =map= func!
#+begin_src  sml
  datatype ilist = Empty | Front of (int*ilist);
  val rec map: (int->int)*ilist -> ilist = fn (f, Empty) => Empty | (f, Front(x,xs)) => Front(f x, map(f, xs));
#+end_src

#+RESULTS:
: val map = fn : (int -> int) * ilist -> ilist

There are actual built-in lists in SML, though:
#+begin_src  sml
  val rec map: (int->int)*int list -> int list = fn (f, nil) => nil | (f, x::xs) => (f x)::(map (f, xs));
#+end_src

#+RESULTS:
: val it = "stdIn" : string

It's time to do something known as /currying/: producing functions for us:
#+begin_src  sml
  val mkadd: int->(int->int) = fn x => fn y => y+x;
  mkadd 2 4 = 2+4 (* ensure our mkadd func works *)
#+end_src

#+RESULTS:
: val it = true : bool

#+begin_src  sml
  val f: int->(int->int) = fn x => fn y => y+x;
  val f': (int*int)->int = fn (x,y) => f x y;
#+end_src

#+RESULTS:
: val f' = fn : int * int -> int

#+begin_src  sml
  val uncurry: (int->(int->int)) -> (int*int)->int = fn f => fn(x,y) => f x y;
  val curry: (int*int->int)->(int->int->int) = fn f => fn x => fn y => f(x,y);
#+end_src

#+RESULTS:
: val curry = fn : (int * int -> int) -> int -> int -> int

Polymorphism can be done with "generic" types that are prefixed by an apostrophe!
#+begin_src  sml
  val f: 'a->'a = fn x => x;
#+end_src

#+RESULTS:
: val f = fn : 'a -> 'a

The well-known =filter= operator:
#+begin_src  sml
  val rec filter: ('a -> bool) -> ('a list -> 'a list) =
   fn f => (fn nil => nil | x::xs => if f x then x::filter f xs else filter f xs);                                                                
#+end_src

#+RESULTS:
: val filter = fn : ('a -> bool) -> 'a list -> 'a list

Trees:
#+begin_src  sml
  datatype 'a tree = Empty | Node of 'a tree * 'a * 'a tree;
  val rec map = fn f => (fn Empty => Empty | Node (l,x,r) => Node(map f l, f x, map f r))
#+end_src

#+RESULTS:
: val map = fn : ('a -> 'b) -> 'a tree -> 'b tree

#+begin_src  sml
  datatype 'a tree = Empty | Node of 'a tree * 'a * 'a tree;
  val rec exists: ('a->bool)->'a tree -> bool = fn f => (fn Empty => false | Node (l,x,r) => f x orelse exists f l orelse exists f r)
#+end_src

#+RESULTS:
: val exists = fn : ('a -> bool) -> 'a tree -> bool

We can use the =op= keyword to use an infix operator like a normal function.
#+begin_src  sml
op + (1, 2)
#+end_src

#+RESULTS:
: val it = 3 : int


Let's define a list-reversing function!
#+begin_src  sml
  val rec revhelper = fn (nil, acc) => acc | (x::xs, acc) => revhelper(xs, x::acc);
  val rec rev = fn L => revhelper(L, nil);
#+end_src

#+RESULTS:
: val rev = fn : 'a list -> 'a list

#+begin_src  sml
  val rec helper = fn nil => nil | NONE::xs => helper xs | (SOME x)::xs => x::helper xs
  val mapPartial: ('a -> 'b option) -> 'a list -> 'b list =
   fn f => helper map o f;
#+end_src

We can pattern match directly!
#+begin_src  sml
  val rec mapPartial = fn f => (fn nil => nil | x::xs => case f of SOME y => y::mapPartial xs | NONE => mapPartial xs);
#+end_src

#+RESULTS:
: val it = "stdIn" : string


We have a void type, too (like Rust).
#+begin_src  sml
  val test: unit = ()
#+end_src

#+RESULTS:
: val test = () : unit

#+begin_src  sml
  val rec length = fn nil => 0 | _::xs => 1+length xs;
  val rec sum = fn nil => 0 | x::xs => x+sum xs;
  val rec lmax = fn nil => 0 | x::xs => max(x, lmax xs);
  val rec allpos = fn nil => true | x::xs => if x >= 0 then allpos xs else false;
#+end_src

#+RESULTS:
: val length = fn : 'a list -> int
: val sum = fn : int list -> int
: val lmax = fn : int list -> int
: val allpos = fn : int list -> bool

Let's automate our list creation functions. This is basically MapReduce!
#+begin_src  sml
  val rec foldl = fn cmb => fn z => (fn nil => z | x::xs => foldl cmb (cmb(z,x)) xs);
  val sum = foldl op + 0;
#+end_src

#+RESULTS:
: val foldl = fn : ('a * 'b -> 'a) -> 'a -> 'b list -> 'a

#+begin_src  sml
  val sum = foldl op + 0;
#+end_src

#+RESULTS:
: val sum = fn : int list -> int

What if we want to handle overflows?
#+begin_src  sml
  val lmax: int list -> int option = foldl (fn (NONE, x) => x | (SOME y, x) => max(x,y)) NONE;
  val lmax_unchecked = foldl max 0;
#+end_src

We can also fold from the right to the left.
#+begin_src  sml
val rec foldr = fn cmb => fn z => (fn nil => z | x::xs => cmb(x, foldr cmb z xs))
#+end_src

#+RESULTS:
: val foldr = fn : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b

#+begin_src  sml
val rev = foldl op:: [];
#+end_src

#+RESULTS:
: val it = "stdIn" : string

#+begin_src  sml
  val rec reduce: ('b*'a*'b -> 'b) -> 'b -> 'a tree -> 'b =
   fn cmb => fn z => fn Empty => z
    | Node(l, x, r) => cmb(reduce cmb z l, x, reduce cmb z r);
  val size = reduce (fn (l, _, r) => l+r+1) 0;
  val depth = reduce (fn (l, _, r) => max(l,r)+1) 0;
#+end_src

#+RESULTS:
: val reduce = fn : ('a * 'b * 'a -> 'a) -> 'a -> 'b tree -> 'a
: val tree = fn : ?.X1 tree -> int
: val depth = fn : ?.X1 tree -> int

#+begin_src  sml
val mapreduce: = fn (f, cmb, z) => reduce cmb z o map f;
#+end_src

SML has... immutable arrays! Speed, without unsafety.

#+begin_src  sml
  type 'a seq;
  val length: 'a seq -> int;
  val nth: 'a seq->int 'a;
  val tabulate: (int->'a)->int->'a seq;
#+end_src

#+RESULTS:
