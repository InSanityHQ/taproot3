:PROPERTIES:
:ID:       1EDA485B-BB19-4AB6-BC4F-99A8C3A74F51
:END:
#+title: Atwood 2
#+author: Houjun Liu

#+begin_src sage
T, F_f, m_1, m_2, a, g = var("T F_f m_1 m_2 a g")

w_1, w_2, b = var("w_1 w_2 b")
m_1 = (w_1 + b)
m_2 = (w_2 + b)

a_1 = 2*a
a_2 = a

eqn1 = solve((T+3*F_f)-m_1*g == -m_1*a_1, T)
eqn2 = solve(2*T-m_2*g == m_2*a_2, T)
eqn = (eqn1[0].rhs() == eqn2[0].rhs())
eqn
#+end_src

#+RESULTS:
: -2*a*b + b*g - (2*a - g)*w_1 - 3*F_f == 1/2*a*b + 1/2*b*g + 1/2*(a + g)*w_2



#+RESULTS:
: Launched html viewer for Graphics3d Object

* For Bucket
# Solve!
#+begin_src sage
solution_b = solve(eqn, b)
solution_b
#+end_src

#+RESULTS:
: [b == -(2*(2*a - g)*w_1 + (a + g)*w_2 + 6*F_f)/(5*a - g)]

#+begin_src sage
b_a(a, w_1, w_2, g) = solution_b[0].rhs()
b_1=b_a(0.690271, 0.3, 0.2, 9.81) # group 1, trial 2
b_2=b_a(0.095733, 0.2, 0.2, 9.81) # group 2, trial 2
(b_1, b_2)
b_a
solve([b==b_1, b==b_2], (b, F_f))
#+end_src

#+RESULTS:
: (0.943597260108089*F_f - 0.465133782433207,
:  0.642994812639349*F_f - 0.200000000000000)
: (a, w_1, w_2, g) |--> -(2*(2*a - g)*w_1 + (a + g)*w_2 + 6*F_f)/(5*a - g)
: [[b == (2728384/7431725), F_f == (2621936548881/2972690000000)]]


We will also take the partial derivatives with respect to each variable, and square them, in order to be able to propergate error

Error by acceleration:

#+begin_src sage
d_a = var("d_a")
bucket_accel_error = b_a.diff(a)*d_a
bucket_accel_error
#+end_src

#+RESULTS:
: (a, w_1, w_2, g) |--> -d_a*((4*w_1 + w_2)/(5*a - g) - 5*(2*(2*a - g)*w_1 + (a + g)*w_2 + 6*F_f)/(5*a - g)^2)

Error by mass $w_1$:

#+begin_src sage
d_w1 = var("d_w1")
bucket_w1_error = b_a.diff(w_1)*d_w1
bucket_w1_error
#+end_src

#+RESULTS:
: (a, w_1, w_2, g) |--> -2*(2*a - g)*d_w1/(5*a - g)

Error by mass $w_2$:

#+begin_src sage
d_w2 = var("d_w2")
bucket_w2_error = b_a.diff(w_2)*d_w2
bucket_w2_error
#+end_src

#+RESULTS:
: (a, w_1, w_2, g) |--> -(a + g)*d_w2/(5*a - g)

Total error:

#+begin_src sage
bucket_error(a, w_1, w_2, g, d_a, d_w1, d_w2, F_f) = sqrt(bucket_accel_error^2 + bucket_w1_error^2 + bucket_w2_error^2)
# b_1=b_a(0.690271, 0.3, 0.2, 9.81) # group 1, trial 2
# b_2=b_a(0.095733, 0.2, 0.2, 9.81) # group 2, trial 2

bucket_error(0.095733, 0.2, 0.2, 9.81, 0.05, 0.05, 0.05, 2621936548881/2972690000000)
#+end_src

#+RESULTS:
: 0.116932223784653



* For Friction
# Solve!

#+begin_src sage
solution_f = solve(eqn, F_f)
solution_f
#+end_src

#+RESULTS:
: [F_f == -5/6*a*b + 1/6*b*g - 1/3*(2*a - g)*w_1 - 1/6*(a + g)*w_2]

#+begin_src sage
ff_a(a, w_1, w_2, g) = solution_f[0].rhs()
ff_1=ff_a(0.690271, 0.3, 0.2, 9.81) # group 1, trial 1
ff_2=ff_a(0.095733, 0.2, 0.2, 9.81) # group 2, trial 1
(ff_1, ff_2)
#+end_src

#+RESULTS:
: (1.05977416666667*b + 0.492936766666667,
:  1.55522250000000*b + 0.311044500000000)

#+begin_src sage
solve([F_f==ff_1, F_f==ff_2], (b, F_f))
#+end_src

#+RESULTS:
: [[b == (2728384/7431725), F_f == (2621936548881/2972690000000)]]

We will also take the partial derivatives with respect to each variable, and square them, in order to be able to propergate error

Error by acceleration:

#+begin_src sage
da = var("d_a")
friction_accel_error = ff_a.diff(a)*da
friction_accel_error
#+end_src

#+RESULTS:
: (a, w_1, w_2, g) |--> -1/6*(5*b + 4*w_1 + w_2)*d_a

Error by mass $w_1$:

#+begin_src sage
d_w1 = var("d_w1")
friction_w1_error = ff_a.diff(w_1)*d_w1
friction_w1_error
#+end_src

#+RESULTS:
: (a, w_1, w_2, g) |--> -1/3*(2*a - g)*d_w1

Error by mass $w_2$:

#+begin_src sage
d_w2 = var("d_w2")
friction_w2_error = ff_a.diff(w_2)*d_w2
friction_w2_error
#+end_src

#+RESULTS:
: (a, w_1, w_2, g) |--> -1/6*(a + g)*d_w2

Total error:

#+begin_src sage
friction_error(a, w_1, w_2, g, d_a, d_w1, d_w2, b) = sqrt(friction_accel_error^2 + friction_w1_error^2 + friction_w2_error^2)
friction_error(0.095733, 0.2, 0.2, 9.81, 0.05, 0.05, 0.05, 2728384/7431725)
# friction_error
#+end_src

#+RESULTS:
: 0.181855625404927

