:PROPERTIES:
:ID:       BDCCDC3C-2915-4319-8387-6BB7319F6847
:END:
#+TITLE: Rotating Chain Experiment: Floor
#+AUTHOR: Houjun Liu

#+PROPERTY: header-args :tangle rotating_chain.r :results verbatim :exports both :session processing_image

We first set up the basic assumptions and variables.

#+begin_src R :results none
GRAV <- 9.8 # gravity (m/s^2)
MASS <- 1 # mass (kg)
I_CM <- 1/12 # roational inertia at the centre of gravity (kg m^2)
L1 <- 0.5 # distance from rotation point to CoM (m)
L2 <- 1 # distance from rotation point to tension (m)
PHI <- 0 # angle of Ft relative to floor orthogoal (rad)
FT <- 11 # tension force (N)
OMEGA <- 0 # angle of line orthogonal to floor relative to gravity (rad) (because shifted axis)
#+end_src

Additionally, we set the time interval and seed values for time and theta (distance from flat):

#+begin_src R :results none
dt <- 0.0001
t_max <- 5 

vx <- 0
vy <- 0

theta <- 0
thetadot <- 0
time <- 0
#+end_src

First, let's create a function for torque in terms of theta (and the constants above:

#+begin_src R :results none
net_torque <- function(theta) {
    return(L2 * FT * cos(theta + PHI) - L1 * MASS * GRAV * cos(theta - OMEGA))
}
#+end_src

Great. Let's start generating the table! We essentially write a for loop to appends to a few different vectors. Variables appended with =c= reflect the column vectors that we will put together.

#+begin_src R :results none
cTime = NULL
cTheta = NULL
cDDTheta = NULL
cDTheta = NULL
cTorqueNet = NULL
cAccelX = NULL
cAccelY = NULL
cVelX = NULL
cVelY = NULL
cFFriction = NULL
cFNormal = NULL

# debugging values
cFNetY = NULL
cFTensionPhiComponent = NULL
cFGravityPhiComponent = NULL

cMuStatic = NULL
cKERot = NULL
cKETrans = NULL
#+end_src

Awesome. Let's now run a lovely little for loop to actually populate the values recursively.

#+begin_src R :results none
for (i in 0:(t_max/dt)) {
    # We first populate the time column with the time, theta column with theta
    cTime[i] = time
    cTheta[i] = theta

    torque <- net_torque(theta)
    # Given the theta value, we calculate the net torque and set that
    cTorqueNet[i] = torque
    # Now that we know the net torque, we could know how much the angular
    # acceleration is by just dividing out the rotational inertia
    thetadotdot <- torque/I_ROT
    cDDTheta[i] = thetadotdot
    # We could also multiply the theta acceleration by time to get the
    # velocity at that point
    thetadot <- dt*thetadotdot + thetadot
    cDTheta[i] = thetadot
    # We could therefore component-ize the acceleration in theta into
    # ax and ay
    ax <- -1 * L1 * sin(theta) * thetadotdot
    cAccelX[i] = ax
    ay <- L1 * cos(theta) * thetadotdot
    cAccelY[i] = ay # @mark isn't sin and cos backwards?
    # We also tally the components seperately for velocity
    vx <- ax*dt + vx
    vy <- ay*dt + vy

    # Based on these accelerations, we therefore could calculate the relative
    # force of friction and normal force by subtracting the force in that direction
    # out of net
    ffriction <- FT*sin(PHI) + MASS*GRAV*sin(OMEGA)-MASS*ax
    fnormal <- MASS*ay-FT*cos(PHI)+MASS*GRAV*cos(OMEGA)

    cFNetY[i] = MASS*ay
    cFTensionPhiComponent[i] = FT*cos(PHI)
    cFGravityPhiComponent[i] = -MASS*GRAV*cos(OMEGA)

    cFFriction[i] = ffriction
    cFNormal[i] = fnormal

    # Then, we calculate the energies
    I_ROT <- I_CM + MASS * (L1*cos(theta))^2 # we calculate I_ROT using
                                             # the Parallel axis theorem
    cKERot[i] = 0.5 * I_ROT * thetadot^2
    cKETrans[i] = 0.5 * MASS * (vx^2+vy^2)

    # Dividing the friction force by the normal force, of course, will result in
    # the (min?) friction coeff
    cMuStatic[i] = ffriction/fnormal
    
    # We incriment the time and also increment theta by multiplying the velocity
    # by dt to get change in the next increment
    time <- dt + time
    theta <- dt*thetadot + theta
}
#+end_src

We now put all of this together in a dataframe.

#+begin_src R :results none
rotating_link <- data.frame(cTime,
                            cTheta,
                            cDTheta,
                            cDDTheta,
                            cTorqueNet,
                            cAccelX,
                            cAccelY,
                            cFFriction,
                            cFNormal,
                            cMuStatic,
                            cKERot,
                            cKETrans)

names(rotating_link) <- c("time",
                          "theta",
                          "d.theta",
                          "dd.theta",
                          "net.torque",
                          "accel.x",
                          "accel.y",
                          "friction.force",
                          "normal.force",
                          "friction.coeff",
                          "ke.rot",
                          "ke.trans")
#+end_src

Let's import some visualization tools, etc.

#+begin_src R :results none
library(tidyverse)
#+end_src

Let's first see the head of this table:

#+begin_src R
head(rotating_link)
#+end_src

#+RESULTS:
: 1e-04	6.1e-08	0.00244	18.3	6.09999999999999	-5.58149999999999e-07	9.14999999999996	5.58149999999999e-07	7.94999999999996	7.02075471698115e-08	9.92266666666661e-07	7.44199999999997e-07
: 2e-04	3.05e-07	0.00426999999999992	18.2999999999992	6.09999999999972	-2.79074999999983e-06	9.14999999999917	2.79074999999983e-06	7.94999999999918	3.51037735849072e-07	3.03881666666634e-06	2.27911249999987e-06
: 3e-04	7.31999999999991e-07	0.00609999999999955	18.2999999999964	6.09999999999837	-6.697799999998e-06	9.14999999999574	6.697799999998e-06	7.94999999999574	8.42490566037935e-07	6.20166666666327e-06	4.65124999999894e-06
: 4e-04	1.34199999999995e-06	0.00792999999999864	18.2999999999909	6.09999999999451	-1.22792999999897e-05	9.1499999999872	1.22792999999897e-05	7.9499999999872	1.54456603773704e-06	1.04808166666489e-05	7.86061249999539e-06
: 5e-04	2.13499999999981e-06	0.00975999999999694	18.299999999983	6.0999999999861	-1.95352499999653e-05	9.14999999997065	1.95352499999653e-05	7.94999999997065	2.4572641509481e-06	1.58762666666024e-05	1.19071999999857e-05
: 6e-04	3.1109999999995e-06	0.0115899999999943	18.299999999974	6.09999999997048	-2.84656499999091e-05	9.14999999994273	2.84656499999091e-05	7.94999999994273	3.58058490567474e-06	2.23880166664823e-05	1.67910124999642e-05

Before we start graphing, let's set a common graph there.

#+begin_src R :results none
default.theme <- theme(text = element_text(size=20), axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 20)), axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 20, l = 0)))
#+end_src

Cool! We could first graph a function for theta over time.

#+begin_src R :results output graphics :file chainrot_time_theta.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=theta)) + default.theme
#+end_src

#+RESULTS:

[[./chainrot_time_theta.png]]

And, similarly, we will graph =ax= and =ay= on top of each other:

#+begin_src R :results output graphics :file chainrot_time_accels.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=accel.x, colour="X Acceleration")) + geom_line(aes(x=time, y=accel.y, colour="Y Acceleration")) + scale_colour_manual("", breaks = c("X Acceleration", "Y Acceleration"), values = c("red", "dark green")) + ylab("acceleration") + default.theme
#+end_src

#+RESULTS:

[[./chainrot_time_accels.png]]

Let's also plot torque as well.

#+begin_src R :results output graphics :file chainrot_torque.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=net.torque)) + default.theme
#+end_src

#+RESULTS:

[[./chainrot_torque.png]]

And. *Most importantly!* Let's plot the normal force.

#+begin_src R :results output graphics :file chainrot_normal.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=normal.force)) + default.theme
#+end_src

#+RESULTS:

[[./chainrot_normal.png]]

Obviously, after the normal force becomes negative, this graph stops being useful.

Theta dot atop theta:

#+begin_src R :results output graphics :file chainrot_thetadot_theta.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=theta, colour="theta")) + geom_line(aes(x=time, y=d.theta, colour="theta dot")) + scale_colour_manual("", breaks = c("theta", "theta dot"), values = c("blue", "brown")) + ylab("radians") + default.theme
#+end_src

#+RESULTS:

[[./chainrot_thetadot_theta.png]]

We finally, plot KE rotation and translation

#+begin_src R :results output graphics :file chainrot_ke.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=ke.rot, colour="ke rotation")) + geom_line(aes(x=time, y=ke.trans, colour="ke translation")) + scale_colour_manual("", breaks = c("ke rotation", "ke translation"), values = c("blue", "brown")) + ylab("joules") + default.theme
#+end_src

#+RESULTS:

[[./chainrot_ke.png]]
