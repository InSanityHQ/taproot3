:PROPERTIES:
:ID:       DF6B626B-4FA9-412A-BF08-772C7B5AD7C3
:END:
#+title: Rotating Chain Experiment: No Floor
#+author: Houjun Liu

#+PROPERTY: header-args :tangle rotating_chain_floorless.r :results verbatim :exports both :session processing_image

We first set up the same set of basic assumptions and variables.

#+begin_src R :results none
GRAV <- 9.8 # gravity (m/s^2)
MASS <- 1 # mass (kg)
I_CM <- 1/12 # roational inertia (kg m^2)
PHI <- 0.1 # angle of Ft relative to floor (parallel) (rad)
L <- 0.5 # distance from the center of mass (of rotation point) to tenson (m)
FT <- 11 # tension force (N)
OMEGA <- 0.1 # angle of line orthogonal to floor relative to gravity (rad) (because shifted axis)
#+end_src

Additionally, we set the time interval and seed values for all values that's tallied:

#+begin_src R :results none
dt <- 0.0001
t_max <- 5

vx <- 0
vy <- 0

time <- 0
theta <- 0
thetadot <- 0
#+end_src

Great. Let's start writing the loop now by setting up a bunch of arrays and writing their values in.

#+begin_src R :results none
cTime = NULL
cTorqueNet = NULL
cDDTheta = NULL
cDTheta = NULL
cTheta = NULL

cAccelX = NULL
cAccelY = NULL
cVelX = NULL
cVelY = NULL

cFNetX = NULL
cFNetY = NULL

cKERot = NULL
cKETrans = NULL
#+end_src

Awesome, we will start tallying, then! 

#+begin_src R :results none
for (i in 0:(t_max/dt)) {
    # write down standard values
    cTime[i] = time
    cTheta[i] = theta

    # torque is calculated via the dot product between the vector of the radius projected out
    # and also the angle at which the thing is at (so like theta + phi)
    #
    # note that, unlike the tabled version, L here represets distance from CoM to tension
    # application
    torque <- FT*L*cos(theta+PHI)
    cTorqueNet[i] = torque

    # from knowing the torque, we could divide out the rotational inertia to figure the
    # acceleration of rotation
    thetadotdot <- torque/I_CM
    cDDTheta[i] <- thetadotdot

    # from this, we could of course tally for the velocity of theta as well
    thetadot <- dt*thetadotdot + thetadot
    cDTheta[i] <- thetadot

    # After knowing the value for theta, we could use it to calculate the net forces in
    # both components.
    # we define up as +, down as -, right as +, left as -
    fnet_x <- FT*cos(PHI) + MASS*GRAV*sin(OMEGA)
    fnet_y <- FT*sin(PHI) - MASS*GRAV*cos(OMEGA)  
    # "I think ax and ay will be constant with time" --- Mark

    cFNetX[i] = fnet_x
    cFNetY[i] = fnet_y

    # Dividing the mass out, we could get accelerations
    ax <- fnet_x/MASS
    ay <- fnet_y/MASS

    # We also tally the components seperately for velocity
    vx <- ax*dt + vx
    vy <- ay*dt + vy

    # And we add them together to tally
    cAccelX[i] = ax
    cAccelY[i] = ay

    cVelX[i] = ax
    cVelY[i] = ay

    cKERot[i] = 0.5 * I_CM * thetadot^2
    cKETrans[i] = 0.5 * MASS * (vx^2+vy^2)

    # We increment the time and theta based on the tallying variable
    time <- dt + time
    theta <- dt*thetadot + theta
}
#+end_src


#+begin_src R :results none
rotating_link <- data.frame(cTime,
                            cTheta,
                            cDTheta,
                            cDDTheta,
                            cTorqueNet,
                            cAccelX,
                            cAccelY,
                            cKERot,
                            cKETrans)

names(rotating_link) <- c("time",
                          "theta",
                          "d.theta",
                          "dd.theta",
                          "net.torque",
                          "accel.x",
                          "accel.y",
                          "ke.rot",
                          "ke.trans")
#+end_src

Let's import some visualization tools, etc.

#+begin_src R :results none
library(tidyverse)
#+end_src

Let's first see the head of this table:

#+begin_src R
head(rotating_link)
#+end_src

#+RESULTS:
: 1e-04	6.56702749083497e-07	0.0131340545489667	65.6702705813175	5.47252254844313	11.9234133011972	-8.65287323660954	7.18764120396806e-06	4.3408e-06
: 2e-04	1.97010820398017e-06	0.0197010807416836	65.6702619271685	5.47252182726404	11.9234133011972	-8.65287323660954	1.61721909329306e-05	9.7668e-06
: 3e-04	3.94021627814853e-06	0.0262681056362569	65.6702489457332	5.47252074547777	11.9234133011972	-8.65287323660954	2.87505572382313e-05	1.73632e-05
: 4e-04	6.56702684177422e-06	0.0328351287999327	65.6702316367577	5.47251930306314	11.9234133011972	-8.65287323660954	4.4922736804507e-05	2.713e-05
: 5e-04	9.85053972176748e-06	0.039402149799923	65.6702099999032	5.47251749999193	11.9234133011972	-8.65287323660954	6.46887253689821e-05	3.90672e-05
: 6e-04	1.37907547017598e-05	0.0459691682033976	65.6701840347464	5.47251533622887	11.9234133011972	-8.65287323660954	8.80485177213443e-05	5.31748e-05


Before we start graphing, let's set a common graph theme.

#+begin_src R :results none
default.theme <- theme(text = element_text(size=20), axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 20)), axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 20, l = 0)))
#+end_src

We will graph =ax= and =ay= on top of each other:

#+begin_src R :results output graphics :file chainrot_time_accels_notable.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=accel.x, colour="X Acceleration")) + geom_line(aes(x=time, y=accel.y, colour="Y Acceleration")) + scale_colour_manual("", breaks = c("X Acceleration", "Y Acceleration"), values = c("red", "dark green")) + ylab("acceleration") + default.theme
#+end_src

#+RESULTS:

[[./chainrot_time_accels_notable.png]]


Theta dot atop theta:

#+begin_src R :results output graphics :file chainrot_thetadot_theta_notable.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=theta, colour="theta")) + geom_line(aes(x=time, y=d.theta, colour="theta dot")) + scale_colour_manual("", breaks = c("theta", "theta dot"), values = c("blue", "brown")) + ylab("radians") + default.theme
#+end_src

#+RESULTS:

[[./chainrot_thetadot_theta_notable.png]]

We finally, plot KE rotation and translation

#+begin_src R :results output graphics :file chainrot_ke_notable.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=ke.rot, colour="ke rotation")) + geom_line(aes(x=time, y=ke.trans, colour="ke translation")) + scale_colour_manual("", breaks = c("ke rotation", "ke translation"), values = c("blue", "brown")) + ylab("joules") + default.theme
#+end_src

#+RESULTS:

[[./chainrot_ke_notable.png]]

Let's also plot torque as well.

#+begin_src R :results output graphics :file chainrot_torque_notable.png :width 852 :height 480
rotating_link %>% ggplot() + geom_line(aes(x=time, y=net.torque)) + default.theme
#+end_src

#+RESULTS:

[[./chainrot_torque_notable.png]]
